version: 2

models:
  - name: data_test_not_constant
    columns:
      - name: field
        tests:
          - dbt_utils.not_constant

  - name: data_test_at_least_one
    columns:
      - name: field
        tests:
          - dbt_utils.at_least_one

  - name: data_test_expression_is_true
    tests:
      - dbt_utils.expression_is_true:
          expression: col_a + col_b = 1
      - dbt_utils.expression_is_true:
          expression: col_a = 0.5
          condition: col_b = 0.5
    columns:
      - name: col_a
        tests:
          - dbt_utils.expression_is_true:
              expression: + col_b = 1
      - name: col_b
        tests:
          - dbt_utils.expression_is_true:
              expression: = 0.5
              condition: col_a = 0.5

  - name: test_recency
    tests:
      - dbt_utils.recency:
          datepart: day
          field: today
          interval: 1

  - name: test_equal_rowcount
    tests:
      - dbt_utils.equal_rowcount:
          compare_model: ref('test_equal_rowcount')

  - name: test_equal_column_subset
    tests:
      - dbt_utils.equality:
          compare_model: ref('data_people')
          compare_columns:
            - first_name
            - last_name
            - email

  - name: data_people
    columns:
      - name: is_active
        tests:
          - dbt_utils.cardinality_equality:
              field: is_active
              to: ref('data_people')

  - name: data_test_unique_where
    columns:
      - name: id
        tests:
          - dbt_utils.unique_where:
              where: "_deleted = false"

  - name: data_test_not_null_where
    columns:
      - name: id
        tests:
          - dbt_utils.not_null_where:
              where: "_deleted = false"

  - name: data_test_not_accepted_values
    columns:
      - name: city
        tests:
          - dbt_utils.not_accepted_values:
              values: ['Madrid', 'Berlin']

  - name: data_test_relationships_where_table_2
    columns:
      - name: id
        tests:
          - dbt_utils.relationships_where:
              from: id
              to: ref('data_test_relationships_where_table_1')
              field: id
              from_condition: id <> 4

  - name: data_test_mutually_exclusive_ranges_no_gaps
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: lower_bound
          upper_bound_column: upper_bound
          gaps: not_allowed

  - name: data_test_mutually_exclusive_ranges_with_gaps
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: valid_from
          upper_bound_column: coalesce(valid_to, '2099-01-01')
          partition_by: subscription_id
          gaps: allowed

      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: valid_from
          upper_bound_column: coalesce(valid_to, '2099-01-01')
          partition_by: subscription_id
          gaps: required

  - name: data_test_mutually_exclusive_ranges_with_gaps_zero_length
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: valid_from
          upper_bound_column: valid_to
          partition_by: subscription_id
          zero_length_range_allowed: true
 
  - name: data_unique_combination_of_columns
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - month
            - product

  - name: data_test_accepted_range
    columns:
      - name: id
        tests:
          - dbt_utils.accepted_range:
              min_value: -1
              max_value: 11
              inclusive: true

          - dbt_utils.accepted_range:
              min_value: -2
              max_value: 11.1
              inclusive: false

          - dbt_utils.accepted_range:
              min_value: 0
              inclusive: true
              where: "id <> -1"

  - name: data_test_equality_a
    tests:
      - dbt_utils.equality:
          compare_model: ref('data_test_equality_b_same_as_a')

      - dbt_utils.equality:
          compare_model: ref('data_test_equality_b_same_as_a')
          column_metadata_tests:
            - all_columns_present_in_both_tables
            - case_sensitive_names
            - matching_order
            - matching_data_types

      # test with subset of columns
      - dbt_utils.equality:
          compare_model: ref('data_test_equality_b_same_as_a')
          # Snowflake uppercases the column names of seeds by default
          compare_columns: "{{ ['COL1', 'COL2'] if target.type == 'snowflake' else ['col1', 'col2'] }}"
          column_metadata_tests:
            - case_sensitive_names
            - matching_order
            - matching_data_types

      # will only compare columns in A so still expect pass
      - dbt_utils.equality:
          compare_model: ref('data_test_equality_c_mixed_data')
          # test errors as expected if below requirements are added
          #column_metadata_tests:
            #- all_columns_present_in_both_tables
            #- matching_data_types

  - name: data_test_equality_c_mixed_data
    tests:
      - dbt_utils.equality:
          compare_model: ref('data_test_equality_d_diff_order_and_case')
          column_metadata_tests:
            - matching_data_types
            - all_columns_present_in_both_tables
            # test errors as expected if below requirements are added
            #- case_sensitive_names
            #- matching_order

      - dbt_utils.equality:
          compare_model: ref('data_test_equality_d_diff_order_and_case')
          # Don't have to uppercase for snowflake this time as not using case_sensitive_names
          compare_columns: ['col3', 'col2', 'col4', 'col5']
          column_metadata_tests:
            - matching_data_types
            # test errors as expected if below requirements are added
            #- case_sensitive_names
            #- matching_order
            #- all_columns_present_in_both_tables

      # Use `compare_columns` where first table has more columns than second
      - dbt_utils.equality:
          compare_model: ref('data_test_equality_a')
          # Snowflake uppercases the column names of seeds by default
          compare_columns: "{{ ['COL1', 'COL2', 'COL3'] if target.type == 'snowflake' else ['col1', 'col2', 'col3'] }}"
          column_metadata_tests:
            - case_sensitive_names
            - matching_order
